{"metadata":{"title":"Thoughts on Qt","author":"Ethan Zhang","description":"Some thoughts on Qt","date":"07/27/2023","id":4},"content":"<p>Qt is a cross-platform, C++ library that provides many features, including a GUI toolkit, networking, XML/JSON serialization/deserialization, and more.</p>\n<p>I recently decided to give it a try by writing two small applications with it:</p>\n<ul>\n<li><a href=\"https://github.com/edzdez/websocket-chat-test\">A real-time chat client using websockets</a> and</li>\n<li><a href=\"https://github.com/edzdez/spelling-bee-qt\">a client for freebee.fun, a clone of the NYT's Spelling Bee game</a>.</li>\n</ul>\n<h2>What I liked</h2>\n<ul>\n<li><strong>Signals and slots:</strong> <br>\nCreating and connecting signals/slots is very ergonomic.\nAt least to me,\n<div class=\"remark-highlight\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token class-name\">QObject</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> signal<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">,</span> slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Qt</span>\n</code></pre></div>\nis a lot more intuitive\n<div class=\"remark-highlight\"><pre class=\"language-cpp\"><code class=\"language-cpp\">m_button<span class=\"token punctuation\">.</span><span class=\"token function\">signal_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>sigc<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">mem_fun</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// gtkmm</span>\n</code></pre></div>\n</li>\n<li><strong><code>QtDesigner</code> (and all the other tooling around Qt):</strong> <br>\nI like how you can quickly throw together a UI in QtDesigner and have <code>moc</code> automatically translate it into code you can work with.\nIt also creates a nice separation between the program logic and the user interface.\nI know that GTK's <code>Glade</code> is similar, but I never seem to be able to get it to work correctly.</li>\n<li><strong>Lots of features:</strong> <br>\nThere are a ton of modules that cover pretty much everything you need, including networking and database access.</li>\n<li><strong>The docs are really good.</strong></li>\n<li><strong>It's actually cross-platform (compiles on Windows without shenanigans)</strong></li>\n</ul>\n<h2>Things I'm not so sure about</h2>\n<ul>\n<li><strong><code>QString</code>, <code>QList</code>, and all the other Qt-specific data structures:</strong> <br>\nWhile they provide more features and are objectively better in some ways than the STL implementations,\nI find it quite annoying to have to constantly convert back and forth between them (e.g. when using other non-Qt libraries).\nThis fact also means that you're kinda locked into using Qt for everything.</li>\n<li><strong>The <code>QObject</code> parent/child relationship:</strong> <br>\nIt seems like the convention in Qt is to construct <code>QObject</code>s on the free store using <code>new</code> and pass in a raw pointer to a parent object, which would then handle deallocation for you.\nWhile this dynamic is rather convenient, it goes against everything I've learned about C++ memory management.</li>\n</ul>\n<h2>Final thoughts</h2>\n<p>If I had to pick one word to describe Qt, it would be \"convenient.\"\nEven with no prior experience, I was able to get up and running pretty quickly and wrote both apps in around a couple of hours each.\nAs such, I look forward to working with Qt in the future.</p>"}